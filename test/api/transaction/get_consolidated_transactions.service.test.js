require('dotenv').config();
const {
  getConsolidatedTransactions,
} = require('../../../src/api/transaction/get_consolidated_transactions.service');
const { HttpResponseMock } = require('../mock/http_reponse.mock');
const { TransactionRepositoryMock } = require('../mock/transaction.repository.mock');

describe('Get Consolidated Transactions', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('validate untilDate', () => {
    it('without untilDate parameter ', async () => {
      const untilDate = undefined;
      const result = await getConsolidatedTransactions(
        HttpResponseMock,
        new TransactionRepositoryMock(),
        untilDate,
      );

      expect(result.statusCode).toEqual(200);
      const actualParameters = HttpResponseMock.ok.mock.calls[0][0];
      expect(actualParameters).toEqual(expect.objectContaining({ credit: 300.4, debit: 150.4, total: 150 }));
    });

    it('untilDate parameter in ISO-8601 fromat', async () => {
      const untilDate = '2023-05-20T22:55:11.444Z';
      const result = await getConsolidatedTransactions(
        HttpResponseMock,
        new TransactionRepositoryMock(),
        untilDate,
      );

      expect(result.statusCode).toEqual(200);
      const actualParameters = HttpResponseMock.ok.mock.calls[0][0];
      expect(actualParameters).toEqual(expect.objectContaining({ credit: 300.4, debit: 150.4, total: 150 }));
    });

    it('invalid untilDate parameter ', async () => {
      const day = '12-12-12';
      const result = await getConsolidatedTransactions(
        HttpResponseMock,
        new TransactionRepositoryMock(),
        day,
      );

      expect(result.statusCode).toEqual(403);
      const actualParameters = HttpResponseMock.invalidFormat.mock.calls[0][0];
      expect(actualParameters).toEqual(
        expect.objectContaining({
          until: [
            {
              message: 'The until must be a valid ISO-8601 date.',
              rule: 'dateiso',
            },
          ],
        }),
      );
    });
  });

  describe('exception generated', () => {
    it('exception generated by findUntil', async () => {
      const transactionRepositoryMock = new TransactionRepositoryMock();
      const spyTransactionRepository = jest
        .spyOn(transactionRepositoryMock, 'findUntil')
        .mockImplementation(() => {
          throw new Error('Exceção gerada pelo mock');
        });

      const untilDate = '2023-05-20T22:55:11.444Z';
      const result = await getConsolidatedTransactions(
        HttpResponseMock,
        transactionRepositoryMock,
        untilDate,
      );
      expect(result.statusCode).toEqual(500);
      const actualParameters = HttpResponseMock.internalError.mock.calls[0][0];
      expect(actualParameters).toEqual('Exceção gerada pelo mock');

      expect(spyTransactionRepository).toHaveBeenCalledWith(new Date(untilDate));
      expect(spyTransactionRepository).toThrow();
    });
  });
});
