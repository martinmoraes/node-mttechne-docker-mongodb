require('dotenv').config();
const {
  getConsolidatedOnDayTransactions,
} = require('../../../src/api/transaction/get_consolidated_on_day_transactions.service');
const { HttpResponseMock } = require('../mock/http_reponse.mock');
const { TransactionRepositoryMock } = require('../mock/transaction.repository.mock');

describe('Get Consolidated On Day Transactions', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('validate day', () => {
    it('without param day', async () => {
      const day = undefined;
      const result = await getConsolidatedOnDayTransactions(
        HttpResponseMock,
        new TransactionRepositoryMock(),
        day,
      );

      expect(result.statusCode).toEqual(403);
      const actualParameters = HttpResponseMock.invalidFormat.mock.calls[0][0];
      expect(actualParameters).toEqual(
        expect.objectContaining({ day: [{ message: 'The date is required.', rule: 'date' }] }),
      );
    });

    it('invalid param day', async () => {
      const day = '12-12-12';
      const result = await getConsolidatedOnDayTransactions(
        HttpResponseMock,
        new TransactionRepositoryMock(),
        day,
      );

      expect(result.statusCode).toEqual(403);
      const actualParameters = HttpResponseMock.invalidFormat.mock.calls[0][0];
      expect(actualParameters).toEqual(
        expect.objectContaining({ day: [{ message: 'The day must be a valid date.', rule: 'date' }] }),
      );
    });
  });

  it('success get consolidated on day transaction', async () => {
    const transactionRepository = new TransactionRepositoryMock();
    const spyTransactionRepository = jest.spyOn(transactionRepository, 'findOnDay');
    const day = '2023-04-25';
    const result = await getConsolidatedOnDayTransactions(HttpResponseMock, transactionRepository, day);

    expect(result.statusCode).toEqual(200);
    let actualParameters = HttpResponseMock.ok.mock.calls[0][0];
    expect(actualParameters).toEqual(expect.objectContaining({ credit: 300.4, debit: 150.4, total: 150 }));

    expect(spyTransactionRepository).toHaveBeenCalledWith(new Date(day));
  });

  it('exception generated by findOnDay', async () => {
    const transactionRepositoryMock = new TransactionRepositoryMock();
    const spyTransactionRepository = jest
      .spyOn(transactionRepositoryMock, 'findOnDay')
      .mockImplementation(() => {
        throw new Error('Exceção gerada pelo mock');
      });

    const day = '2023-04-25';
    const result = await getConsolidatedOnDayTransactions(HttpResponseMock, transactionRepositoryMock, day);

    expect(result.statusCode).toEqual(500);
    const actualParameters = HttpResponseMock.internalError.mock.calls[0][0];
    expect(actualParameters).toEqual('Exceção gerada pelo mock');

    expect(spyTransactionRepository).toHaveBeenCalledWith(new Date(day));
    expect(spyTransactionRepository).toThrow();
  });
});
